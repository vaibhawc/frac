{"version":3,"sources":["frac/core.cljs"],"mappings":"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","names":["frac.core/red","x","frac.core/sqr","frac.core/ool","frac.core/pi","js/frac","js/frac.core","js/frac.core.alpha","frac.core/alpha","reagent.core.atom","js/frac.core.interval","frac.core/interval","cljs.core.atom","js/frac.core.level","frac.core/level","frac.core/p","y","frac.core/cp","r","a","frac.core/cp-from-p","p","Math/sqrt","Math/atan","cljs.core._EQ_","frac.core/p-from-cp","cp","Math/cos","Math/sin","frac.core/add-p","p1","p2","frac.core/sub-p","frac.core/add-cp","cp1","cp2","frac.core/sub-cp","frac.core/mul-cp","frac.core/cp1","frac.core/cp2","frac.core/cline","js/frac.core.past-group-of-clines","frac.core/past-group-of-clines","frac.core/draw-cline","k","cline","frac.core/frac-a-cline","a-cline","odc","ol","dd","cljs.core/deref","nl","ndc","beta","rdc","cpq","cpp","cpo","frac.core/fract-it","clines","cljs.core/count","cljs.core.comp","cljs.core/vec","cljs.core/flatten","cljs.core/vector","cljs.core.map","frac.core/alpha-min","frac.core/red-alpha","alpha","frac.core/update-alpha","cljs.core.swap_BANG_","js/clearInterval","frac.core/move-alpha","cljs.core/reset!","js/setInterval","frac.core/do-level","cljs.core/inc","frac.core/update-alpha-level","frac.core/move-do","js/console.log","frac.core/reset-everything","frac.core/move-do-button","frac.core/reset-button","frac.core/set-min-alpha","angle","p1__15790#","frac.core/set-min-alpha-space","frac.core/frac","group","iter__4523__auto__","s__15795","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","b__15797","cljs.core/chunk-buffer","i__15796","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__15794","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","i","cljs.core.range","cljs.core.nth","frac.core/input","frac.core/root","frac.core/mount-root","reagent.dom.render","js/document","frac.core/init!","cljs.core/chunk-first"],"sourcesContent":["(ns frac.core\n    (:require\n      [reagent.core :as r]\n      [reagent.dom :as d] [clojure.core.async :as async]))\n\n\n;; -------------------------\n;; Views\n;;\n(defn red [x] (- x 0.1))\n(defn sqr [x] (* x x))\n(def ool 300)\n(def pi (/ 22 7))\n(defonce alpha (r/atom pi))\n(defonce interval (atom 0))\n(defonce level (atom 0))\n(defn p [x y] {:x x :y y})\n(defn cp [r a] {:r r :a a})\n\n(defn cp-from-p [p] (let [x (:x p) y (:y p)]\n                      (if (< x 0)\n                        (cp (Math/sqrt (+ (sqr x) (sqr y))) (+ pi (Math/atan (/ y x))))\n                        (cp (Math/sqrt (+ (sqr x) (sqr y))) (if (= x 0) (/ 2 pi) (Math/atan (/ y x)))))))\n\n(defn p-from-cp [cp] (let [r (:r cp) a (:a cp)] (p (* r (Math/cos a)) (* r (Math/sin a)))))\n\n(defn add-p [p1 p2] (p (+ (:x p1) (:x p2)) (+ (:y p1) (:y p2))))\n(defn sub-p [p1 p2] (p (- (:x p1) (:x p2)) (- (:y p1) (:y p2))))\n(defn add-cp [cp1 cp2] (cp-from-p (add-p (p-from-cp cp1) (p-from-cp cp2))))\n(defn sub-cp [cp1 cp2] (cp-from-p (sub-p (p-from-cp cp1) (p-from-cp cp2))))\n(defn mul-cp [cp1 cp2] (cp (* (:r cp1) (:r cp2)) (+ (:a cp1) (:a cp2))))\n\n(def cp1 (cp 0 0))\n(def cp2 (cp ool 0))\n\n(defn cline [cp1 cp2] {:cp1 cp1 :cp2 cp2})\n\n(defonce past-group-of-clines (r/atom []))\n\n(defn draw-cline [k cline]\n  [:line {:x1 (+ 50 (* (:r (:cp1 cline)) (Math/cos (:a (:cp1 cline)))))\n          :y1 (- 300 (* (:r (:cp1 cline)) (Math/sin (:a (:cp1 cline)))))\n          :x2 (+ 50 (* (:r (:cp2 cline)) (Math/cos (:a (:cp2 cline)))))\n          :y2 (- 300 (* (:r (:cp2 cline)) (Math/sin (:a (:cp2 cline)))))\n          :stroke \"grey\"\n          :stroke-width 1 :key k}])\n\n(defn frac-a-cline [a-cline]\n  (let [cp2 (:cp2 a-cline)\n        cp1 (:cp1 a-cline)\n        odc (sub-cp cp2 cp1)\n        ol (:r odc)\n        dd (* 2 (+ 1 (Math/sin (/ @alpha 2))))\n        nl (/ ol dd)\n        ndc (cp nl (:a odc))\n        beta (/ (- pi @alpha) 2)\n        rdc (mul-cp ndc (cp 1 beta))\n        cpq (add-cp cp1 ndc)\n        cpp (sub-cp cp2 ndc)\n        cpo (add-cp cpq rdc)]\n      [(cline cp1 cpq)\n       (cline cpq cpo)\n       (cline cpo cpp)\n       (cline cpp cp2)]))\n\n(defn fract-it [clines]\n  (if (> (count clines) 0)\n    ((comp vec flatten vector) (map frac-a-cline clines))\n    [(cline cp1 cp2)]))\n\n;;\n(def alpha-min (r/atom 0.15))\n(defn red-alpha [alpha] (- alpha 0.05))\n\n(defn update-alpha []\n  (if (> @alpha @alpha-min)\n    (swap! alpha red-alpha)\n    (js/clearInterval @interval)))\n\n(defn move-alpha []\n  (reset! interval (js/setInterval update-alpha 10)))\n\n(defn do-level []\n  (swap! past-group-of-clines fract-it)\n  (reset! alpha pi)\n  (swap! level inc))\n\n(defn update-alpha-level []\n  (if (> @alpha @alpha-min)\n      (swap! alpha red-alpha)\n      (js/clearInterval @interval)))\n\n(defn move-do []\n      (do-level)\n      (js/console.log (count @past-group-of-clines))\n      (reset! interval (js/setInterval update-alpha-level 10)))\n\n(defn reset-everything []\n  (reset! past-group-of-clines [])\n  (reset! alpha pi)\n  (reset! level 1))\n\n(defn move-do-button []\n  [:div {:style {:width 34 :height 25 :background-color \"green\" :border-radius 5} :on-click move-do}])\n\n(defn reset-button []\n  [:div {:style {:width 34 :height 25 :background-color \"red\" :border-radius 5} :on-click reset-everything}])\n\n(defn set-min-alpha [angle]\n  (reset! alpha-min angle))\n\n(defn set-min-alpha-space []\n   [:input {:type \"text\" :value @alpha-min :style {:width 34 :height 21 :border-radius 5} :on-change #(reset! alpha-min (.-value (.-target %)))}])\n\n(defn frac []\n  [:svg {:x 0 :y 0 :width 400 :height 400}\n   (let [group (fract-it @past-group-of-clines)]\n     (for [i (range (count group))]\n       (draw-cline i (nth group i))))])\n\n(defn input []\n  [:div {:style {:height 200 :width 400 :align-items \"flex-start\" :justify-content \"space-around\" :display \"flex\"}}\n   (set-min-alpha-space)\n   (move-do-button)\n   (reset-button)])\n\n(defn root []\n  [:div {:style {:height 600 :width 400 :align-items \"center\"}}\n    (frac)(input)])\n\n;; -------------------------\n;; -------------------------\n;; Initialize app\n(defn mount-root []\n  (d/render [root]\n            (.getElementById js/document \"app\")))\n\n(defn ^:export init! []\n  (mount-root))\n"]}